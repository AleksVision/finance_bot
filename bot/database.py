import aiosqlite
import logging
import os
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from cachetools import TTLCache
import matplotlib.pyplot as plt
import io
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

DATABASE_NAME = 'finance.db'

CATEGORY_TRANSLATIONS = {
    # –î–æ—Ö–æ–¥—ã
    'salary': 'üíº –ó–∞—Ä–ø–ª–∞—Ç–∞',
    'freelance': 'üíª –§—Ä–∏–ª–∞–Ω—Å',
    'investments': 'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 
    'other_income': 'üí∞ –ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã',
    'gifts': 'üéÅ –ü–æ–¥–∞—Ä–∫–∏',
    
    # –†–∞—Å—Ö–æ–¥—ã
    'housing': 'üè† –ñ–∏–ª—å–µ',
    'transport': 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    'electronics': 'üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
    'health': 'üè• –ó–¥–æ—Ä–æ–≤—å–µ',
    'other_expense': 'üí∏ –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'
}

def translate_category(category):
    return CATEGORY_TRANSLATIONS.get(category, category)

@dataclass
class Transaction:
    id: Optional[int]
    type: str
    amount: Decimal
    category: str
    description: Optional[str]
    date: datetime
    user_id: int
    total_income: Optional[Decimal] = None
    total_expense: Optional[Decimal] = None
    balance: Optional[Decimal] = None

@dataclass
class Statistics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    total_income: Decimal
    total_expense: Decimal
    balance: Decimal
    transactions: List[Transaction]

@dataclass
class CategoryStatistics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    category: str
    type: str
    total: Decimal

@dataclass
class StatisticsResult:
    total_income: Decimal
    total_expense: Decimal
    balance: Decimal
    transactions: List[Transaction]
    income_details: List[Dict[str, float]]
    expense_details: List[Dict[str, float]]

class DatabaseError(Exception):
    """
    –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    
    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö,
    –ø–æ–∑–≤–æ–ª—è—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
    """
    def __init__(self, message: str, original_error: Optional[Exception] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        :param message: –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        :param original_error: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –æ—à–∏–±–∫—É
        """
        super().__init__(message)
        self.original_error = original_error

class FinanceCache:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    def __init__(self, ttl: int = 300):  # TTL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç
        self.statistics_cache = TTLCache(maxsize=1000, ttl=ttl)
        self.category_statistics_cache = TTLCache(maxsize=1000, ttl=ttl)

    def _make_key(self, user_id: int, start_date: Optional[datetime] = None, 
                  end_date: Optional[datetime] = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –∫—ç—à–∞"""
        start_str = start_date.isoformat() if start_date else "none"
        end_str = end_date.isoformat() if end_date else "none"
        return f"user_{user_id}_start_{start_str}_end_{end_str}"

    def get_statistics(self, user_id: int, start_date: Optional[datetime] = None,
                      end_date: Optional[datetime] = None) -> Optional[Statistics]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –∫—ç—à–∞"""
        key = self._make_key(user_id, start_date, end_date)
        cached_data = self.statistics_cache.get(key)
        if cached_data:
            return Statistics(
                total_income=Decimal(str(cached_data[0])),
                total_expense=Decimal(str(cached_data[1])),
                balance=Decimal(str(cached_data[2])),
                transactions=cached_data[3]
            )
        return None

    def set_statistics(self, user_id: int, stats: Statistics,
                      start_date: Optional[datetime] = None,
                      end_date: Optional[datetime] = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫—ç—à"""
        key = self._make_key(user_id, start_date, end_date)
        cached_data = (
            float(stats.total_income),
            float(stats.total_expense),
            float(stats.balance),
            stats.transactions
        )
        self.statistics_cache[key] = cached_data

    def get_category_statistics(self, user_id: int, start_date: Optional[datetime] = None,
                              end_date: Optional[datetime] = None) -> Optional[List[CategoryStatistics]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–∑ –∫—ç—à–∞"""
        key = self._make_key(user_id, start_date, end_date)
        return self.category_statistics_cache.get(key)

    def set_category_statistics(self, user_id: int, stats: List[CategoryStatistics],
                              start_date: Optional[datetime] = None,
                              end_date: Optional[datetime] = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ –∫—ç—à"""
        key = self._make_key(user_id, start_date, end_date)
        self.category_statistics_cache[key] = stats

    def invalidate_user_cache(self, user_id: int):
        """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        for cache in [self.statistics_cache, self.category_statistics_cache]:
            keys_to_remove = [k for k in cache.keys() if str(user_id) in k]
            for key in keys_to_remove:
                cache.pop(key, None)

class FinanceDatabase:
    def __init__(self, database_name: str = DATABASE_NAME):
        self.database_name = database_name
        self.cache = FinanceCache()

    async def init_db(self, force_recreate: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π
        
        :param force_recreate: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_exists = os.path.exists(self.database_name)
            
            logger.info(f"Initializing database: {self.database_name}")
            logger.info(f"Database exists: {db_exists}, Force recreate: {force_recreate}")
            
            # –ï—Å–ª–∏ –±–∞–∑–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ
            if not db_exists or force_recreate:
                async with aiosqlite.connect(self.database_name) as db:
                    # –í–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
                    await db.execute('PRAGMA foreign_keys = ON')
                    logger.info("Enabled foreign keys")
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    await db.execute('''
                        CREATE TABLE IF NOT EXISTS users (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            telegram_id INTEGER UNIQUE NOT NULL,
                            username TEXT,
                            first_name TEXT,
                            last_name TEXT,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            settings_json TEXT DEFAULT '{}'
                        )
                    ''')
                    logger.info("Created users table")

                    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    await db.execute('''
                        CREATE TABLE IF NOT EXISTS categories (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            name TEXT NOT NULL,
                            type TEXT NOT NULL,
                            icon TEXT DEFAULT 'üìÅ',
                            is_default BOOLEAN DEFAULT FALSE,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            UNIQUE(name, type)
                        )
                    ''')
                    logger.info("Created categories table")

                    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                    await db.execute('''
                        CREATE TABLE IF NOT EXISTS transactions (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER NOT NULL,
                            type TEXT NOT NULL CHECK(type IN ('income', 'expense')),
                            amount DECIMAL(10,2) NOT NULL CHECK(amount > 0),
                            category_id INTEGER NOT NULL,
                            description TEXT,
                            date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE,
                            FOREIGN KEY(category_id) REFERENCES categories(id)
                        )
                    ''')
                    logger.info("Created transactions table")

                    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
                    await db.execute('''
                        CREATE TRIGGER IF NOT EXISTS update_transaction_timestamp 
                        AFTER UPDATE ON transactions
                        BEGIN
                            UPDATE transactions SET updated_at = CURRENT_TIMESTAMP
                            WHERE id = NEW.id;
                        END;
                    ''')
                    logger.info("Created transaction timestamp trigger")

                    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    await db.execute('CREATE INDEX IF NOT EXISTS idx_transactions_user_date ON transactions(user_id, date)')
                    await db.execute('CREATE INDEX IF NOT EXISTS idx_transactions_category ON transactions(category_id)')
                    logger.info("Created indexes")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    default_categories = [
                        # –î–æ—Ö–æ–¥—ã
                        ('–ó–∞—Ä–ø–ª–∞—Ç–∞', 'income', 'üíº'),
                        ('–°–≤–æ–±–æ–¥–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'income', 'üíª'),
                        ('–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'income', 'üìà'),
                        ('–ü–æ–¥–∞—Ä–∫–∏', 'income', 'üéÅ'),
                        ('–î—Ä—É–≥–∏–µ –¥–æ—Ö–æ–¥—ã', 'income', '‚ùì'),
                        
                        # –†–∞—Å—Ö–æ–¥—ã
                        ('–ü—Ä–æ–¥—É–∫—Ç—ã', 'expense', 'üõí'),
                        ('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'expense', 'üöá'),
                        ('–ñ–∏–ª—å–µ', 'expense', 'üè†'),
                        ('–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'expense', 'üçø'),
                        ('–ó–¥–æ—Ä–æ–≤—å–µ', 'expense', 'üíä'),
                        ('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'expense', 'üìö'),
                        ('–î—Ä—É–≥–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', 'expense', '‚ùì')
                    ]
                    
                    for name, type_, icon in default_categories:
                        await db.execute(
                            "INSERT OR IGNORE INTO categories (name, type, icon, is_default) 
                            VALUES (?, ?, ?, ?)",
                            (name, type_, icon, True)
                        )
                    
                    logger.info("Added default categories")
                    
                    # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await db.execute('''
                        CREATE TABLE IF NOT EXISTS user_settings (
                            user_id INTEGER PRIMARY KEY,
                            default_currency TEXT DEFAULT 'RUB',
                            monthly_expense_limit REAL DEFAULT NULL,
                            notification_frequency TEXT DEFAULT 'weekly',
                            report_period TEXT DEFAULT 'month',
                            FOREIGN KEY (user_id) REFERENCES users(id)
                        )
                    ''')
                    
                    # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    await db.execute('''
                        CREATE TABLE IF NOT EXISTS user_categories (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER,
                            name TEXT,
                            type TEXT CHECK(type IN ('income', 'expense')),
                            is_default BOOLEAN DEFAULT 0,
                            FOREIGN KEY (user_id) REFERENCES users(id)
                        )
                    ''')
                    
                    # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    await db.execute('''
                        CREATE TABLE IF NOT EXISTS category_limits (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            user_id INTEGER,
                            category TEXT,
                            monthly_limit REAL,
                            FOREIGN KEY (user_id) REFERENCES users(id)
                        )
                    ''')
                    
                    await db.commit()
            
            # –ï—Å–ª–∏ –±–∞–∑–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            logger.info(f"Database {self.database_name} initialized successfully")
            
        except Exception as e:
            logger.error(f"Database initialization error: {e}")
            raise DatabaseError("Failed to initialize database", e)

    async def _migrate_old_data(self, db: aiosqlite.Connection):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
            async with db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='transactions'") as cursor:
                if not await cursor.fetchone():
                    return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
            async with db.execute("PRAGMA table_info(transactions)") as cursor:
                columns = {row[1] for row in await cursor.fetchall()}
                required_columns = {'category', 'type', 'amount', 'date'}
                if not all(col in columns for col in required_columns):
                    return  # –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            await db.execute(
                "INSERT OR IGNORE INTO users (telegram_id, username) VALUES (?, ?)",
                (0, 'migrated_user')
            )

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with db.execute("SELECT id FROM users WHERE telegram_id = 0") as cursor:
                user_id = (await cursor.fetchone())[0]

            # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            old_categories = set()
            async with db.execute("SELECT DISTINCT category, type FROM transactions") as cursor:
                async for row in cursor:
                    old_categories.add((row[0], row[1]))

            for category, type_ in old_categories:
                await db.execute(
                    "INSERT OR IGNORE INTO categories (name, type, is_default) VALUES (?, ?, ?)",
                    (category, 'income' if type_ == '–¥–æ—Ö–æ–¥' else 'expense', True)
                )

            # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            async with db.execute("SELECT * FROM transactions") as cursor:
                async for row in cursor:
                    category_name = row['category']
                    transaction_type = 'income' if row['type'] == '–¥–æ—Ö–æ–¥' else 'expense'

                    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    async with db.execute(
                        "SELECT id FROM categories WHERE name = ? AND type = ?",
                        (category_name, transaction_type)
                    ) as cat_cursor:
                        category_id = (await cat_cursor.fetchone())[0]

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    await db.execute('''
                        INSERT INTO transactions 
                        (user_id, type, amount, category_id, date)
                        VALUES (?, ?, ?, ?, ?)
                    ''', (user_id, transaction_type, row['amount'], category_id, row['date']))

            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
            await db.execute("ALTER TABLE transactions RENAME TO old_transactions_backup")

            await db.commit()

        except Exception as e:
            logger.error(f"Migration error: {e}")
            await db.rollback()
            # –í —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥–Ω–∏–º–∞—Ç—å –æ—à–∏–±–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏
            if not os.getenv('TESTING'):
                raise DatabaseError("Failed to migrate old data", e)

    async def create_user_if_not_exists(self, user_id: int) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        logger.info(f"Checking if user {user_id} exists")
        try:
            async with aiosqlite.connect(self.database_name) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor = await db.execute(
                    "SELECT id FROM users WHERE telegram_id = ?",
                    (user_id,)
                )
                user = await cursor.fetchone()
                
                if not user:
                    logger.info(f"User {user_id} not found, creating new user")
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await db.execute(
                        "INSERT INTO users (telegram_id) VALUES (?)",
                        (user_id,)
                    )
                    await db.commit()
                    logger.info(f"Created new user with telegram_id {user_id}")
                else:
                    logger.info(f"User {user_id} already exists")
        except aiosqlite.Error as e:
            logger.error(f"Database error in create_user_if_not_exists: {e}")
            raise DatabaseError(f"Failed to create/check user: {str(e)}", e)

    async def create_user(self, telegram_id: int, username: str) -> int:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        
        :param telegram_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        """
        logger.info(f"Creating user with telegram_id {telegram_id}")
        
        try:
            async with aiosqlite.connect(self.database_name) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                async with db.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,)) as cursor:
                    existing_user = await cursor.fetchone()
                    
                    if existing_user:
                        logger.warning(f"User with telegram_id {telegram_id} already exists")
                        return existing_user[0]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor = await db.execute(
                    "INSERT INTO users (telegram_id, username) VALUES (?, ?)",
                    (telegram_id, username)
                )
                await db.commit()
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return cursor.lastrowid

        except aiosqlite.Error as e:
            logger.error(f"Database error in create_user: {e}")
            raise DatabaseError(f"Failed to create user: {str(e)}", e)
        except Exception as e:
            logger.error(f"Error creating user: {e}")
            raise DatabaseError("Failed to create user", e)

    async def add_transaction(self, 
                            user_id: int,
                            amount: Decimal,
                            type_: str,
                            category: str,
                            description: Optional[str] = None,
                            date: Optional[datetime] = None) -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"""
        logger.info(f"Adding {type_} transaction for user {user_id}: {amount} {category}")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—É–º–º—ã
            if amount < Decimal("0.00"):
                raise ValueError("Transaction amount cannot be negative")
            elif amount == Decimal("0.00"):
                raise ValueError("Transaction amount cannot be zero")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if type_ not in ["income", "expense"]:
                raise ValueError(f"Invalid transaction type: {type_}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
            if description and len(description) > 1000:
                description = description[:1000]  # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é
            if date is None:
                date = datetime.now()

            async with aiosqlite.connect(self.database_name) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                async with db.execute("SELECT id FROM users WHERE telegram_id = ?", (user_id,)) as cursor:
                    user = await cursor.fetchone()
                    if not user:
                        raise ValueError(f"User with telegram_id {user_id} not found")
                    db_user_id = user[0]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                async with db.execute(
                    "INSERT OR IGNORE INTO categories (name, type) VALUES (?, ?)",
                    (category, type_)
                ):
                    await db.commit()

                # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                async with db.execute(
                    "SELECT id FROM categories WHERE name = ? AND type = ?",
                    (category, type_)
                ) as cursor:
                    category_id = (await cursor.fetchone())[0]

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                cursor = await db.execute(
                    '''
                    INSERT INTO transactions
                    (user_id, type, amount, category_id, description, date)
                    VALUES (?, ?, ?, ?, ?, ?)
                    ''',
                    (db_user_id, type_, str(amount), category_id, description, date)
                )
                transaction_id = cursor.lastrowid
                await db.commit()

                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                self.cache.invalidate_user_cache(user_id)

                return transaction_id

        except ValueError as e:
            logger.error(f"Validation error: {str(e)}")
            raise DatabaseError(str(e))
        except aiosqlite.Error as e:
            logger.error(f"Database error in add_transaction: {e}")
            raise DatabaseError(f"Failed to add transaction: {str(e)}", e)
        except Exception as e:
            logger.error(f"Error adding transaction: {e}")
            raise DatabaseError("Failed to add transaction", e)

    async def get_statistics(
        self,
        user_id: int,
        days: int = 30
    ) -> Optional[StatisticsResult]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        :return: –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ None
        """
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ {days} –¥–Ω–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
            async with aiosqlite.connect(self.database_name) as db:
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
                start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=days)
                logger.info(f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏: {start_date}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                async with db.execute("SELECT COUNT(*) FROM users WHERE telegram_id = ?", (user_id,)) as cursor:
                    user_count = await cursor.fetchone()
                    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ID {user_id}: {user_count[0]}")
                    
                    if user_count[0] == 0:
                        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                        return None
                
                # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –¥–∞—Ç–µ
                query = '''
                    SELECT 
                        t.id, t.type, t.amount, 
                        c.name AS category, t.description, 
                        t.date, t.user_id
                    FROM transactions t
                    JOIN categories c ON t.category_id = c.id
                    JOIN users u ON t.user_id = u.id
                    WHERE u.telegram_id = ? AND t.date >= ?
                    ORDER BY t.date DESC
                '''
                params = [user_id, start_date.isoformat()]
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                async with db.execute(query, params) as cursor:
                    rows = await cursor.fetchall()
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(rows)}")

                # –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                if not rows:
                    logger.warning(f"–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return None
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                transactions = []
                for row in rows:
                    transaction_date = datetime.fromisoformat(row[5])
                    transaction = Transaction(
                        id=row[0],
                        type=row[1],
                        amount=Decimal(row[2]),
                        category=row[3],
                        description=row[4],
                        date=transaction_date,
                        user_id=row[6]
                    )
                    transactions.append(transaction)

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                income_transactions = [t for t in transactions if t.type == 'income']
                expense_transactions = [t for t in transactions if t.type == 'expense']
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã
                total_income = sum(t.amount for t in income_transactions)
                total_expense = sum(t.amount for t in expense_transactions)
                
                logger.info(f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income}, –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {total_expense}")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                income_categories = {}
                for transaction in income_transactions:
                    category = translate_category(transaction.category)
                    income_categories[category] = income_categories.get(category, 0) + transaction.amount
                
                expense_categories = {}
                for transaction in expense_transactions:
                    category = translate_category(transaction.category)
                    expense_categories[category] = expense_categories.get(category, 0) + transaction.amount
                
                # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
                income_details = [
                    {
                        'category': category, 
                        'amount': float(amount), 
                        'percentage': round(amount / total_income * 100, 1) if total_income > 0 else 0
                    } 
                    for category, amount in income_categories.items()
                ]
                
                expense_details = [
                    {
                        'category': category, 
                        'amount': float(amount), 
                        'percentage': round(amount / total_expense * 100, 1) if total_expense > 0 else 0
                    } 
                    for category, amount in expense_categories.items()
                ]
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ
                income_details.sort(key=lambda x: x['amount'], reverse=True)
                expense_details.sort(key=lambda x: x['amount'], reverse=True)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = StatisticsResult(
                    total_income=total_income,
                    total_expense=total_expense,
                    balance=total_income - total_expense,
                    transactions=transactions,
                    income_details=income_details,
                    expense_details=expense_details
                )
                
                logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")
                return result
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
            return None

    async def get_category_statistics(self,
                                    user_id: int,
                                    start_date: datetime = None,
                                    end_date: datetime = None) -> List[CategoryStatistics]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
            cached_stats = self.cache.get_category_statistics(user_id, start_date, end_date)
            if cached_stats:
                return cached_stats

            async with aiosqlite.connect(self.database_name) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º db_user_id
                async with db.execute(
                    "SELECT id FROM users WHERE telegram_id = ?",
                    (user_id,)
                ) as cursor:
                    user = await cursor.fetchone()
                    if not user:
                        raise ValueError(f"User with telegram_id {user_id} not found")
                    db_user_id = user[0]

                # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –¥–∞—Ç
                date_condition = ""
                params = [db_user_id]
                if start_date:
                    date_condition += " AND t.date >= ?"
                    params.append(start_date.isoformat())
                if end_date:
                    date_condition += " AND t.date <= ?"
                    params.append(end_date.isoformat())

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                async with db.execute(
                    f"""
                    SELECT c.name as category, t.type,
                           COALESCE(SUM(CAST(t.amount AS DECIMAL(10,2))), 0) as total
                    FROM transactions t
                    JOIN categories c ON t.category_id = c.id
                    WHERE t.user_id = ?{date_condition}
                    GROUP BY c.name, t.type
                    ORDER BY total DESC
                    """,
                    params
                ) as cursor:
                    category_stats = []
                    async for row in cursor:
                        category_stats.append(CategoryStatistics(
                            category=row[0],
                            type=row[1],
                            total=Decimal(str(row[2]))
                        ))

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
                    self.cache.set_category_statistics(user_id, category_stats, start_date, end_date)

                    return category_stats

        except ValueError as e:
            logger.error(f"Validation error: {str(e)}")
            raise DatabaseError(str(e))
        except aiosqlite.Error as e:
            logger.error(f"Database error in get_category_statistics: {e}")
            raise DatabaseError(f"Failed to get category statistics: {str(e)}", e)
        except Exception as e:
            logger.error(f"Error getting category statistics: {e}")
            raise DatabaseError("Failed to get category statistics", e)

    async def get_transactions(
        self, 
        user_id: int, 
        start_date: Optional[datetime] = None, 
        end_date: Optional[datetime] = None,
        limit: Optional[int] = None
    ) -> List[Transaction]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ.
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        :param start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        :param end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        :param limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        :return: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        """
        logger.info(f"Retrieving transactions for user {user_id}")
        logger.info(f"Date filtering: start_date={start_date}, end_date={end_date}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with aiosqlite.connect(self.database_name) as db:
                async with db.execute("SELECT id FROM users WHERE telegram_id = ?", (user_id,)) as cursor:
                    user = await cursor.fetchone()
                    if not user:
                        raise ValueError(f"User with telegram_id {user_id} not found")
                    db_user_id = user[0]

                # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π SQL-–∑–∞–ø—Ä–æ—Å
                query = '''
                    SELECT 
                        t.id, t.type, t.amount, 
                        c.name AS category, t.description, 
                        t.date, t.user_id
                    FROM transactions t
                    JOIN categories c ON t.category_id = c.id
                    WHERE t.user_id = ? AND t.date >= ?
                    ORDER BY t.date DESC
                '''
                params = [db_user_id, start_date]

                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã
                if end_date:
                    query += " AND t.date <= ?"
                    params.append(end_date.isoformat())
                    logger.info(f"Date range filter: {start_date.isoformat()} - {end_date.isoformat()}")
                logger.info(f"Date filter: {start_date.isoformat()}")

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ
                query += " ORDER BY t.date DESC"

                # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if limit is not None:
                    query += " LIMIT ?"
                    params.append(limit)

                logger.info(f"Final SQL query: {query}")
                logger.info(f"Query parameters: {params}")

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                async with db.execute(query, params) as cursor:
                    rows = await cursor.fetchall()
                    logger.info(f"Rows fetched: {len(rows)}")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                transactions = []
                for row in rows:
                    transaction_date = datetime.fromisoformat(row[5])
                    logger.info(f"Transaction date: {transaction_date}")
                    transaction = Transaction(
                        id=row[0],
                        type=row[1],
                        amount=Decimal(row[2]),
                        category=row[3],
                        description=row[4],
                        date=transaction_date,
                        user_id=row[6]
                    )
                    transactions.append(transaction)
                    logger.info(f"Transaction: {transaction}")

                return transactions

        except ValueError as e:
            logger.error(f"Validation error: {str(e)}")
            raise DatabaseError(str(e))
        except aiosqlite.Error as e:
            logger.error(f"Database error in get_transactions: {e}")
            raise DatabaseError(f"Failed to retrieve transactions: {str(e)}", e)
        except Exception as e:
            logger.error(f"Error retrieving transactions: {e}")
            raise DatabaseError("Failed to retrieve transactions", e)

    async def update_transaction(
        self, 
        transaction_id: int, 
        amount: Optional[Decimal] = None, 
        description: Optional[str] = None,
        category: Optional[str] = None,
        date: Optional[datetime] = None
    ) -> Transaction:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            async with aiosqlite.connect(self.database_name) as db:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                cursor = await db.execute(
                    "SELECT * FROM transactions WHERE id = ?", 
                    (transaction_id,)
                )
                current_transaction = await cursor.fetchone()
                
                if not current_transaction:
                    raise DatabaseError(f"Transaction with id {transaction_id} not found")

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_params = {}
                if amount is not None:
                    if amount <= 0:
                        raise DatabaseError("Transaction amount must be positive")
                    update_params['amount'] = float(amount)
                if description is not None:
                    update_params['description'] = description
                if category is not None:
                    # –ù–∞—Ö–æ–¥–∏–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    category_cursor = await db.execute(
                        "SELECT id FROM categories WHERE name = ?", 
                        (category,)
                    )
                    category_id = await category_cursor.fetchone()
                    if not category_id:
                        raise DatabaseError(f"Category {category} not found")
                    update_params['category_id'] = category_id[0]
                if date is not None:
                    update_params['date'] = date

                # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å
                if update_params:
                    set_clause = ", ".join([f"{k} = ?" for k in update_params.keys()])
                    values = list(update_params.values()) + [transaction_id]
                    
                    await db.execute(
                        f"UPDATE transactions SET {set_clause} WHERE id = ?", 
                        values
                    )
                    await db.commit()

                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
                self.cache.invalidate_user_cache(current_transaction[1])  # user_id

                return await self._get_transaction_by_id(transaction_id)

        except Exception as e:
            logger.error(f"Error updating transaction: {e}")
            raise DatabaseError("Failed to update transaction", e)

    async def delete_transaction(self, transaction_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            async with aiosqlite.connect(self.database_name) as db:
                # –ü–æ–ª—É—á–∞–µ–º user_id –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                cursor = await db.execute(
                    "SELECT user_id FROM transactions WHERE id = ?", 
                    (transaction_id,)
                )
                result = await cursor.fetchone()
                
                if not result:
                    raise DatabaseError(f"Transaction with id {transaction_id} not found")
                
                user_id = result[0]

                # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                await db.execute(
                    "DELETE FROM transactions WHERE id = ?", 
                    (transaction_id,)
                )
                await db.commit()

                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
                self.cache.invalidate_user_cache(user_id)

        except Exception as e:
            logger.error(f"Error deleting transaction: {e}")
            raise DatabaseError("Failed to delete transaction", e)

    async def get_total_balance(self, user_id: int) -> Decimal:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.database_name) as db:
                cursor = await db.execute("""
                    SELECT 
                        SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) as total_income,
                        SUM(CASE WHEN type = 'expense' THEN amount ELSE 0 END) as total_expense
                    FROM transactions
                    WHERE user_id = ?
                """, (user_id,))
                
                result = await cursor.fetchone()
                
                total_income = Decimal(str(result[0] or 0))
                total_expense = Decimal(str(result[1] or 0))
                
                return total_income - total_expense

        except Exception as e:
            logger.error(f"Error calculating total balance: {e}")
            raise DatabaseError("Failed to calculate total balance", e)

    async def _get_transaction_by_id(self, transaction_id: int) -> Transaction:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ ID"""
        async with aiosqlite.connect(self.database_name) as db:
            db.row_factory = aiosqlite.Row
            cursor = await db.execute(
                """
                SELECT t.*, c.name as category_name 
                FROM transactions t
                JOIN categories c ON t.category_id = c.id
                WHERE t.id = ?
                """, 
                (transaction_id,)
            )
            row = await cursor.fetchone()
            
            if not row:
                raise DatabaseError(f"Transaction with id {transaction_id} not found")
            
            return Transaction(
                id=row['id'],
                type=row['type'],
                amount=Decimal(str(row['amount'])),
                category=row['category_name'],
                description=row['description'],
                date=datetime.fromisoformat(row['date']),
                user_id=row['user_id']
            )

    async def graph_image(self, user_id: int, days: int = 30) -> Optional[bytes]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        :return: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.get_statistics(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            if not stats or not stats.transactions:
                logging.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return None
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories_income = {}
            categories_expense = {}
            
            for transaction in stats.transactions:
                category = str(transaction.category)
                amount = float(transaction.amount)
                
                if transaction.type == 'income':
                    categories_income[category] = categories_income.get(category, 0) + amount
                else:
                    categories_expense[category] = categories_expense.get(category, 0) + amount
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            if not categories_income and not categories_expense:
                logging.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return None
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            plt.figure(figsize=(16, 8))
            plt.suptitle(f'–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π', fontsize=16, fontweight='bold')
            
            # Subplot –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
            plt.subplot(1, 2, 1)
            plt.title('–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=14)
            
            total_income = sum(categories_income.values())
            income_labels = [f"{cat}\n{val:.0f} —Ä—É–±. ({val/total_income*100:.1f}%)" 
                             for cat, val in categories_income.items()]
            
            plt.pie(
                list(categories_income.values()), 
                labels=income_labels, 
                autopct='%1.1f%%',
                wedgeprops={'edgecolor': 'white', 'linewidth': 1},
                colors=plt.cm.Greens(np.linspace(0.4, 0.8, len(categories_income)))
            )
            
            # Subplot –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
            plt.subplot(1, 2, 2)
            plt.title('–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=14)
            
            total_expense = sum(categories_expense.values())
            expense_labels = [f"{cat}\n{val:.0f} —Ä—É–±. ({val/total_expense*100:.1f}%)" 
                              for cat, val in categories_expense.items()]
            
            plt.pie(
                list(categories_expense.values()), 
                labels=expense_labels, 
                autopct='%1.1f%%',
                wedgeprops={'edgecolor': 'white', 'linewidth': 1},
                colors=plt.cm.Reds(np.linspace(0.4, 0.8, len(categories_expense)))
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            plt.figtext(0.5, 0.02, 
                        f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income:.0f} —Ä—É–±. | üí∏ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {total_expense:.0f} —Ä—É–±. | üíµ –ë–∞–ª–∞–Ω—Å: {total_income-total_expense:.0f} —Ä—É–±.", 
                        ha='center', fontsize=10, bbox=dict(facecolor='white', alpha=0.5))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –ø–∞–º—è—Ç—å
            buf = io.BytesIO()
            plt.tight_layout()
            plt.savefig(buf, format='png', dpi=200)
            plt.close()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            chart_data = buf.getvalue()
            
            logging.info(f"–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –†–∞–∑–º–µ—Ä: {len(chart_data)} –±–∞–π—Ç")
            
            return chart_data
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}", exc_info=True)
            return None

    async def generate_statistics_chart(self, user_id: int, days: int = 30) -> Optional[bytes]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        :return: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ None
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.get_statistics(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            if not stats or not stats.transactions:
                logging.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return None
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            categories_income = {}
            categories_expense = {}
            
            for transaction in stats.transactions:
                try:
                    # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    category = str(transaction.category)
                    amount = float(transaction.amount)
                    
                    if transaction.type == 'income':
                        categories_income[category] = categories_income.get(category, 0) + amount
                    else:
                        categories_expense[category] = categories_expense.get(category, 0) + amount
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {transaction}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            if not categories_income and not categories_expense:
                logging.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return None
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            plt.figure(figsize=(10, 5))  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            plt.suptitle(f'–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', fontsize=12)
            
            # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ subplot
            subplot_count = 1 if not categories_income or not categories_expense else 2
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            if categories_income:
                plt.subplot(1, subplot_count, 1)
                plt.title('–î–æ—Ö–æ–¥—ã')
                plt.pie(
                    list(categories_income.values()), 
                    labels=list(categories_income.keys()), 
                    autopct='%1.1f%%',
                    wedgeprops={'edgecolor': 'white'},
                    colors=plt.cm.Greens(np.linspace(0.4, 0.8, len(categories_income)))
                )
            
            if categories_expense:
                plt.subplot(1, subplot_count, 2 if categories_income else 1)
                plt.title('–†–∞—Å—Ö–æ–¥—ã')
                plt.pie(
                    list(categories_expense.values()), 
                    labels=list(categories_expense.keys()), 
                    autopct='%1.1f%%',
                    wedgeprops={'edgecolor': 'white'},
                    colors=plt.cm.Reds(np.linspace(0.4, 0.8, len(categories_expense)))
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –ø–∞–º—è—Ç—å
            buf = io.BytesIO()
            plt.tight_layout()
            plt.savefig(buf, format='png', dpi=150)
            plt.close()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            chart_data = buf.getvalue()
            
            logging.info(f"–ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –†–∞–∑–º–µ—Ä: {len(chart_data)} –±–∞–π—Ç")
            
            return chart_data
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}", exc_info=True)
            return None

    async def get_user_settings(self, user_id):
        async with aiosqlite.connect(self.database_name) as db:
            db.row_factory = aiosqlite.Row
            async with db.execute('SELECT * FROM user_settings WHERE user_id = ?', (user_id,)) as cursor:
                settings = await cursor.fetchone()
                return dict(settings) if settings else None

    async def update_user_settings(self, user_id, **kwargs):
        async with aiosqlite.connect(self.database_name) as db:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            await db.execute('''
                INSERT OR REPLACE INTO user_settings (user_id, default_currency, monthly_expense_limit, 
                notification_frequency, report_period)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                user_id, 
                kwargs.get('default_currency', 'RUB'),
                kwargs.get('monthly_expense_limit'),
                kwargs.get('notification_frequency', 'weekly'),
                kwargs.get('report_period', 'month')
            ))
            await db.commit()

    async def add_user_category(self, user_id, name, category_type):
        async with aiosqlite.connect(self.database_name) as db:
            await db.execute('''
                INSERT INTO user_categories (user_id, name, type) 
                VALUES (?, ?, ?)
            ''', (user_id, name, category_type))
            await db.commit()

    async def get_user_categories(self, user_id, category_type=None):
        async with aiosqlite.connect(self.database_name) as db:
            query = 'SELECT * FROM user_categories WHERE user_id = ?'
            params = [user_id]
            
            if category_type:
                query += ' AND type = ?'
                params.append(category_type)
            
            async with db.execute(query, params) as cursor:
                return await cursor.fetchall()

    async def remove_user_category(self, user_id, category_name, category_type):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param category_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        :param category_type: –¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (income/expense)
        """
        async with aiosqlite.connect(self.database_name) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            async with db.execute('''
                SELECT COUNT(*) 
                FROM transactions t
                JOIN user_categories uc ON t.category_id = uc.id
                WHERE uc.user_id = ? AND uc.name = ? AND uc.type = ?
            ''', (user_id, category_name, category_type)) as cursor:
                transaction_count = await cursor.fetchone()
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π, –∑–∞–ø—Ä–µ—â–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                if transaction_count[0] > 0:
                    logger.warning(f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_name}: –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
                    return False
            
            # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            await db.execute('''
                DELETE FROM user_categories 
                WHERE user_id = ? AND name = ? AND type = ?
            ''', (user_id, category_name, category_type))
            
            await db.commit()
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True

    async def get_user_custom_categories(self, user_id, category_type=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param category_type: –¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (income/expense), –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        :return: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        async with aiosqlite.connect(self.database_name) as db:
            query = '''
                SELECT name, type 
                FROM user_categories 
                WHERE user_id = ? AND is_default = 0
            '''
            params = [user_id]
            
            if category_type:
                query += ' AND type = ?'
                params.append(category_type)
            
            async with db.execute(query, params) as cursor:
                return await cursor.fetchall()

    async def update_notification_settings(self, user_id, notification_type, is_enabled, frequency=None):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (expense_limit, monthly_report, etc.)
        :param is_enabled: –í–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        :param frequency: –ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (daily, weekly, monthly)
        """
        async with aiosqlite.connect(self.database_name) as db:
            await db.execute('''
                INSERT OR REPLACE INTO user_settings 
                (user_id, setting_name, setting_value, additional_value) 
                VALUES (?, ?, ?, ?)
            ''', (
                user_id, 
                f'notification_{notification_type}', 
                'enabled' if is_enabled else 'disabled',
                frequency or ''
            ))
            await db.commit()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {user_id}: {notification_type}")

    async def get_notification_settings(self, user_id, notification_type=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: –°–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        async with aiosqlite.connect(self.database_name) as db:
            if notification_type:
                query = '''
                    SELECT setting_value, additional_value 
                    FROM user_settings 
                    WHERE user_id = ? AND setting_name = ?
                '''
                params = [user_id, f'notification_{notification_type}']
            else:
                query = '''
                    SELECT setting_name, setting_value, additional_value 
                    FROM user_settings 
                    WHERE user_id = ? AND setting_name LIKE 'notification_%'
                '''
                params = [user_id]
            
            async with db.execute(query, params) as cursor:
                results = await cursor.fetchall()
                
                if notification_type:
                    return {
                        'status': results[0][0] if results else 'disabled',
                        'frequency': results[0][1] if results else None
                    }
                else:
                    return {
                        setting.replace('notification_', ''): {
                            'status': value,
                            'frequency': freq
                        }
                        for setting, value, freq in results
                    }

    async def get_users_for_notifications(self, notification_type):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        :param notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        :return: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        async with aiosqlite.connect(self.database_name) as db:
            async with db.execute('''
                SELECT user_id 
                FROM user_settings 
                WHERE setting_name = ? AND setting_value = 'enabled'
            ''', (f'notification_{notification_type}',)) as cursor:
                return [row[0] for row in await cursor.fetchall()]

    async def update_report_period(self, user_id, start_day=1, period_type='monthly'):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param start_day: –î–µ–Ω—å –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (1-28)
        :param period_type: –¢–∏–ø –ø–µ—Ä–∏–æ–¥–∞ (monthly, quarterly, custom)
        """
        async with aiosqlite.connect(self.database_name) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–Ω—è
            if not (1 <= start_day <= 28):
                raise ValueError("–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 28")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
            await db.execute('''
                INSERT OR REPLACE INTO user_settings 
                (user_id, setting_name, setting_value, additional_value) 
                VALUES (?, ?, ?, ?)
            ''', (
                user_id, 
                'report_period', 
                period_type,
                str(start_day)
            ))
            
            await db.commit()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è {user_id}: {period_type}, –Ω–∞—á–∞–ª–æ: {start_day}")

    async def get_report_period(self, user_id):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
        """
        async with aiosqlite.connect(self.database_name) as db:
            async with db.execute('''
                SELECT setting_value, additional_value 
                FROM user_settings 
                WHERE user_id = ? AND setting_name = 'report_period'
            ''', (user_id,)) as cursor:
                result = await cursor.fetchone()
                
                # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if not result:
                    return {
                        'period_type': 'monthly',
                        'start_day': 1
                    }
                
                return {
                    'period_type': result[0],
                    'start_day': int(result[1])
                }

    async def calculate_report_period(self, user_id, current_date=None):
        """
        –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param current_date: –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∞—è)
        :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞—Ç–∞–º–∏ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–æ–≤
        """
        from datetime import datetime, timedelta
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
        if current_date is None:
            current_date = datetime.now()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞
        period_settings = await self.get_report_period(user_id)
        start_day = period_settings['start_day']
        period_type = period_settings['period_type']
        
        # –†–∞—Å—á–µ—Ç –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        if period_type == 'monthly':
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            if current_date.day < start_day:
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –¥–Ω—è —Å—Ç–∞—Ä—Ç–∞, –±–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
                current_period_start = datetime(current_date.year, current_date.month, start_day) - timedelta(days=1)
                current_period_end = datetime(current_date.year, current_date.month, start_day) - timedelta(days=1)
            else:
                current_period_start = datetime(current_date.year, current_date.month, start_day)
                current_period_end = datetime(current_date.year, current_date.month + 1, start_day) - timedelta(days=1)
        
        elif period_type == 'quarterly':
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–≤–∞—Ä—Ç–∞–ª
            quarter = (current_date.month - 1) // 3
            quarter_months = {
                0: (1, 2, 3),
                1: (4, 5, 6),
                2: (7, 8, 9),
                3: (10, 11, 12)
            }
            
            first_month = quarter_months[quarter][0]
            current_period_start = datetime(current_date.year, first_month, start_day)
            current_period_end = datetime(current_date.year, first_month + 2, start_day) - timedelta(days=1)
        
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞: {period_type}")
        
        return {
            'current_period_start': current_period_start,
            'current_period_end': current_period_end,
            'previous_period_start': current_period_start - timedelta(days=current_period_end.day),
            'previous_period_end': current_period_start - timedelta(days=1)
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = FinanceDatabase()
