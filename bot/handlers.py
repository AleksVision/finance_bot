from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from decimal import Decimal, InvalidOperation
from datetime import datetime, timedelta
import logging
import io

from bot.database import FinanceDatabase, DatabaseError

from typing import Dict, Any
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, User, Message, InputFile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

class TransactionType:
    INCOME = 'income'
    EXPENSE = 'expense'

class Categories:
    INCOME = {
        'salary': '–ó–∞—Ä–ø–ª–∞—Ç–∞',
        'freelance': '–°–≤–æ–±–æ–¥–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        'investments': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
        'gifts': '–ü–æ–¥–∞—Ä–∫–∏',
        'other_income': '–î—Ä—É–≥–∏–µ –¥–æ—Ö–æ–¥—ã'
    }
    
    EXPENSE = {
        'food': '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
        'transport': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
        'housing': '–ñ–∏–ª–∏—â–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
        'entertainment': '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        'health': '–ó–¥–æ—Ä–æ–≤—å–µ',
        'clothes': '–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å',
        'electronics': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        'other_expense': '–î—Ä—É–≥–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'
    }

class FinanceForm(StatesGroup):
    waiting_for_transaction_type = State()
    waiting_for_category = State()
    waiting_for_amount = State()

class SettingsForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    settings_menu = State()
    choose_currency = State()
    set_expense_limit = State()
    set_notification_frequency = State()
    set_report_period = State()
    manage_categories = State()
    add_category = State()
    notification_settings = State()
    report_period_settings = State()

class KeyboardFactory:
    @staticmethod
    def get_main_keyboard():
        builder = ReplyKeyboardBuilder()
        builder.button(text="üí∞ –î–æ—Ö–æ–¥—ã")
        builder.button(text="üí∏ –†–∞—Å—Ö–æ–¥—ã")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        builder.adjust(2, 2)
        return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

    @staticmethod
    def get_transaction_type_keyboard():
        builder = InlineKeyboardBuilder()
        builder.button(text="üí∞ –î–æ—Ö–æ–¥", callback_data="transaction_income")
        builder.button(text="üí∏ –†–∞—Å—Ö–æ–¥", callback_data="transaction_expense")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2, 1)
        return builder.as_markup()

    @staticmethod
    def get_category_inline_keyboard(transaction_type: str):
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_type}")
        
        builder = InlineKeyboardBuilder()
        
        categories = (
            Categories.INCOME 
            if transaction_type == TransactionType.INCOME 
            else Categories.EXPENSE
        )
        logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}")
        
        emoji_map = {
            'salary': 'üíº', 'freelance': 'üíª', 'investments': 'üìà', 'gifts': 'üéÅ', 'other_income': '‚ùì',
            'food': 'üçΩÔ∏è', 'transport': 'üöá', 'housing': 'üè†', 'entertainment': 'üéâ', 
            'health': 'üíä', 'clothes': 'üëö', 'electronics': 'üíª', 'other_expense': '‚ùì'
        }
        
        for key, value in categories.items():
            emoji = emoji_map.get(key, 'üí∞')
            button_text = f"{emoji} {value}"
            callback_data = f"category_{key}"
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: {button_text}, callback_data: {callback_data}")
            builder.button(
                text=button_text, 
                callback_data=callback_data
            )
        
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2, 1)
        
        keyboard = builder.as_markup()
        logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {keyboard}")
        return keyboard

    @staticmethod
    def get_confirmation_keyboard():
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")
        builder.button.text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        builder.adjust(2)
        return builder.as_markup()

    @staticmethod
    def get_statistics_keyboard():
<<<<<<< HEAD
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –≥—Ä–∞—Ñ–∏–∫–∞
        """
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –ó–∞ 30 –¥–Ω–µ–π", callback_data="stats_30_days")
        builder.button(text="üìà –ì—Ä–∞—Ñ–∏–∫", callback_data="show_chart")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
=======
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="show_statistics")
        builder.button(text="üìà –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="show_chart")
        builder.adjust(2)
        return builder.as_markup()

    @staticmethod
    def get_settings_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        builder = InlineKeyboardBuilder()
        builder.button(text="üí± –í–∞–ª—é—Ç–∞", callback_data="settings_currency")
        builder.button(text="üí∏ –õ–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤", callback_data="settings_expense_limit")
        builder.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")
        builder.button(text="üìä –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞", callback_data="settings_report_period")
        builder.button(text="üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="settings_categories")
        builder.button(text="üìà –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤", callback_data="show_report_periods")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2, 2)
        return builder.as_markup()

    @staticmethod
    def get_currency_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã"""
        builder = InlineKeyboardBuilder()
        builder.button(text="üá∑üá∫ –†—É–±–ª—å (RUB)", callback_data="currency_RUB")
        builder.button(text="üá∫üá∏ –î–æ–ª–ª–∞—Ä (USD)", callback_data="currency_USD")
        builder.button(text="üá™üá∫ –ï–≤—Ä–æ (EUR)", callback_data="currency_EUR")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")
        builder.adjust(2, 1)
        return builder.as_markup()

    @staticmethod
    def get_categories_keyboard(category_type):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        default_categories = (
            Categories.INCOME.keys() if category_type == 'income' 
            else Categories.EXPENSE.keys()
        )
        
        for category in default_categories:
            builder.button(
                text=f"‚ùå {Categories.INCOME.get(category, Categories.EXPENSE.get(category, category))}", 
                callback_data=f"remove_category_{category_type}_{category}"
            )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"add_category_{category_type}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")
        
        builder.adjust(2)
        return builder.as_markup()

    @staticmethod
    def get_notifications_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        builder = InlineKeyboardBuilder()
        
        notifications = [
            ('expense_limit', '–õ–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤'),
            ('monthly_report', '–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç'),
            ('weekly_summary', '–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞')
        ]
        
        for notification_type, label in notifications:
            builder.button(
                text=f"üîî {label}", 
                callback_data=f"notification_settings_{notification_type}"
            )
        
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def get_notification_type_keyboard(notification_type):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        builder = InlineKeyboardBuilder()
        
        frequencies = {
            'expense_limit': ['daily', 'weekly', 'monthly'],
            'monthly_report': ['monthly'],
            'weekly_summary': ['weekly']
        }
        
        # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è
        builder.button(
            text="‚úÖ –í–∫–ª—é—á–∏—Ç—å", 
            callback_data=f"notification_toggle_{notification_type}"
        )
        
        # –ö–Ω–æ–ø–∫–∏ —á–∞—Å—Ç–æ—Ç—ã (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
        for freq in frequencies.get(notification_type, []):
            builder.button(
                text=f"üïí {freq.capitalize()}", 
                callback_data=f"notification_frequency_{notification_type}_{freq}"
            )
        
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="notification_settings")
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def get_report_period_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"""
        builder = InlineKeyboardBuilder()
        
        periods = [
            ('monthly', '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π'),
            ('quarterly', '–ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π')
        ]
        
        for period_type, label in periods:
            builder.button(
                text=f"üìÖ {label}", 
                callback_data=f"report_period_{period_type}"
            )
        
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def get_report_period_start_keyboard(period_type):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞"""
        builder = InlineKeyboardBuilder()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        for day in range(1, 29):
            builder.button(
                text=f"üìÜ {day} —á–∏—Å–ª–æ", 
                callback_data=f"report_period_start_{period_type}_{day}"
            )
        
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_report_period")
        builder.adjust(7)
        return builder.as_markup()

    @staticmethod
    def get_report_periods_keyboard(periods):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞"""
        builder = InlineKeyboardBuilder()
        
        for i, period in enumerate(periods, 1):
            start = period['start'].strftime('%d.%m.%Y')
            end = period['end'].strftime('%d.%m.%Y')
            builder.button(
                text=f"üìä {start} - {end}", 
                callback_data=f"generate_report_{i-1}"
            )
        
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")
        builder.adjust(1)
        return builder.as_markup()

    @staticmethod
    def get_report_actions_keyboard(period_index):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
        builder = InlineKeyboardBuilder()
        
        builder.button(text="üìä –î–∏–∞–≥—Ä–∞–º–º–∞", callback_data=f"report_chart_{period_index}")
        builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å PDF", callback_data=f"report_pdf_{period_index}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_report_periods")
        
>>>>>>> f0703d875c19494d9b6433598ebe239a613bb162
        builder.adjust(2, 1)
        return builder.as_markup()

class FinanceHandler:
    def __init__(self):
        self.db = FinanceDatabase()
        self.keyboard_factory = KeyboardFactory()

    def get_transaction_type_text(self, data: Dict[str, Any]) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        transaction_type = data.get('transaction_type')
        if transaction_type == TransactionType.INCOME:
            return "–¥–æ—Ö–æ–¥–∞"
        elif transaction_type == TransactionType.EXPENSE:
            return "—Ä–∞—Å—Ö–æ–¥–∞"
        return ""

    async def start_transaction(self, message: types.Message, state: FSMContext, transaction_type: str):
        """
        –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await self.db.create_user_if_not_exists(message.from_user.id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∏–ø–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await state.update_data(transaction_type=transaction_type)
            await state.set_state(FinanceForm.waiting_for_category)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            text = (
                "üì• –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é –¥–æ—Ö–æ–¥–∞" 
                if transaction_type == TransactionType.INCOME 
                else "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–∞"
            )

            # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            keyboard = (
                self.keyboard_factory.get_category_inline_keyboard(TransactionType.INCOME) 
                if transaction_type == TransactionType.INCOME 
                else self.keyboard_factory.get_category_inline_keyboard(TransactionType.EXPENSE)
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def start_transaction_income(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        await self.start_transaction(message, state, TransactionType.INCOME)

    async def start_transaction_expense(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        await self.start_transaction(message, state, TransactionType.EXPENSE)

    async def process_category_callback(self, callback: CallbackQuery, state: FSMContext):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        transaction_type = data.get('transaction_type')

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback.data
        category = callback.data.split('_', 1)[1]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        await state.update_data(category=category)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
        await state.set_state(FinanceForm.waiting_for_amount)
        await callback.answer()

    async def process_amount(self, message: types.Message, state: FSMContext):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            transaction_type = data.get('transaction_type')
            category = data.get('category')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—É–º–º—ã
            try:
                amount = Decimal(message.text.replace(',', '.'))
                if amount <= 0:
                    raise InvalidOperation
            except (InvalidOperation, ValueError):
                await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await self.db.add_transaction(
                user_id=message.from_user.id,
                amount=amount,
                type_=transaction_type.value if hasattr(transaction_type, 'value') else transaction_type,
                category=category
            )

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_type} –Ω–∞ —Å—É–º–º—É {amount} –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            await state.set_state(None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ –Ω–µ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
            await state.set_state(None)

    async def cancel_transaction(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            await callback.message.answer(
                "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
                reply_markup=self.keyboard_factory.get_main_keyboard()
            )
            await state.clear()
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")

    async def main_menu(self, callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            await callback.message.answer(
                "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                reply_markup=self.keyboard_factory.get_main_keyboard()
            )
            await state.clear()
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")

    async def show_statistics(self, message: types.Message):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            await self.db.create_user_if_not_exists(message.from_user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.db.get_statistics(message.from_user.id)
            
            if not stats:
                await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            message_text = self.format_statistics_message(stats)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            await message.answer(
                message_text, 
                reply_markup=self.keyboard_factory.get_statistics_keyboard()
<<<<<<< HEAD
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            logger.info(
                f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞: "
                f"user_id={message.from_user.id}, "
                f"total_income={stats.total_income}, "
                f"total_expense={stats.total_expense}"
=======
>>>>>>> f0703d875c19494d9b6433598ebe239a613bb162
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def format_statistics_message(self, stats):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
        """
        message = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n"
        message += f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {stats.total_income:.0f} —Ä—É–±.\n\n"
        message += f"üí∏ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {stats.total_expense:.0f} —Ä—É–±.\n\n"
        message += f"üíµ –ë–∞–ª–∞–Ω—Å: {stats.balance:.0f} —Ä—É–±.\n\n"
        
        message += "üìà –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
        for item in stats.income_details:
            message += f"- {item['category']}: {item['amount']:.0f} —Ä—É–±. ({item['percentage']}%)\n\n"
        
        message += "\nüìâ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
        for item in stats.expense_details:
            message += f"- {item['category']}: {item['amount']:.0f} —Ä—É–±. ({item['percentage']}%)\n\n"
        
        return message

    async def start_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await self.db.create_user_if_not_exists(message.from_user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! \n\n"
                "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üí∞\n\n"
                "–ß—Ç–æ —É–º–µ—é:\n"
                "‚Ä¢ üí∞ –î–æ–±–∞–≤–ª—è—Ç—å –¥–æ—Ö–æ–¥—ã\n"
                "‚Ä¢ üí∏ –£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã\n"
                "‚Ä¢ üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:",
                reply_markup=self.keyboard_factory.get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def process_show_chart(self, callback: CallbackQuery):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        try:
            user_id = callback.from_user.id
            logger.info(f"–ó–∞–ø—Ä–æ—Å –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.db.get_statistics(user_id)
            
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not stats or not stats.transactions:
                await callback.message.answer(
                    "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤!",
                    reply_markup=self.keyboard_factory.get_statistics_keyboard()
                )
                await callback.answer()
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–º–æ—â—å—é graph_image
            chart_bytes = await self.db.graph_image(user_id)
            
            if chart_bytes:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –†–∞–∑–º–µ—Ä: {len(chart_bytes)} –±–∞–π—Ç")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                await callback.message.answer_photo(
                    photo=chart_bytes, 
                    caption='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤',
                    reply_markup=self.keyboard_factory.get_statistics_keyboard()
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                message_text = self.format_statistics_message(stats)
                await callback.message.answer(
                    message_text,
                    reply_markup=self.keyboard_factory.get_statistics_keyboard()
                )
            
            await callback.answer()
        
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
            await callback.message.answer(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.',
                reply_markup=self.keyboard_factory.get_statistics_keyboard()
            )
            await callback.answer()

    async def show_settings(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            await message.answer(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
                reply_markup=self.keyboard_factory.get_settings_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def process_currency_settings(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã"""
        try:
            currency = callback.data.split('_')[1]
            user_id = callback.from_user.id
            
            await self.db.update_user_settings(user_id, default_currency=currency)
            
            await callback.message.edit_text(
                f"üí± –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {currency}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.keyboard_factory.get_settings_keyboard()
            )
            await callback.answer(f"–í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {currency}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∞–ª—é—Ç—ã: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É")

    async def process_expense_limit(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        try:
            await state.set_state(SettingsForm.set_expense_limit)
            await callback.message.edit_text(
                "üí∏ –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ (—á–∏—Å–ª–æ):\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 50000"
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–∏–º–∏—Ç–∞: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–∏–º–∏—Ç–∞")

    async def save_expense_limit(self, message: types.Message, state: FSMContext):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        try:
            limit = float(message.text)
            user_id = message.from_user.id
            
            await self.db.update_user_settings(user_id, monthly_expense_limit=limit)
            
            await message.answer(
                f"‚úÖ –ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit} —Ä—É–±.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.keyboard_factory.get_settings_keyboard()
            )
            await state.clear()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏–º–∏—Ç")

    async def manage_categories(self, callback: CallbackQuery, state: FSMContext):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
        try:
            category_type = callback.data.split('_')[2]
            
            await state.update_data(category_type=category_type)
            
            await callback.message.edit_text(
                f"üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ({category_type})\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
                reply_markup=self.keyboard_factory.get_categories_keyboard(category_type)
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")

    async def start_add_category(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            category_type = callback.data.split('_')[2]
            
            await state.set_state(SettingsForm.add_category)
            await state.update_data(category_type=category_type)
            
            await callback.message.edit_text(
                f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({category_type})\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    async def save_new_category(self, message: types.Message, state: FSMContext):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_data = await state.get_data()
            category_type = state_data.get('category_type')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
            category_name = message.text.lower().replace(' ', '_')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            user_id = message.from_user.id
            await self.db.add_user_category(user_id, category_name, category_type)
            
            await message.answer(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.keyboard_factory.get_categories_keyboard(category_type)
            )
            await state.clear()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")

    async def remove_category(self, callback: CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # –ü–∞—Ä—Å–∏–º callback_data
            _, category_type, category = callback.data.split('_')
            user_id = callback.from_user.id
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            result = await self.db.remove_user_category(user_id, category, category_type)
            
            if result:
                await callback.message.edit_text(
                    f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É–¥–∞–ª–µ–Ω–∞\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=self.keyboard_factory.get_categories_keyboard(category_type)
                )
                await callback.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} —É–¥–∞–ª–µ–Ω–∞")
            else:
                await callback.message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –µ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.\n"
                    "–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.",
                    reply_markup=self.keyboard_factory.get_categories_keyboard(category_type)
                )
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")

    async def show_notifications_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            await callback.message.edit_text(
                "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
                reply_markup=self.keyboard_factory.get_notifications_keyboard()
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    async def show_notification_type_settings(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            notification_type = callback.data.split('_')[-1]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user_id = callback.from_user.id
            self.current_notification_settings = await self.db.get_notification_settings(
                user_id, 
                notification_type
            )
            
            await state.update_data(notification_type=notification_type)
            
            await callback.message.edit_text(
                f"üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_type}\n\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω—ã' if self.current_notification_settings.get('status') == 'enabled' else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
                f"–ß–∞—Å—Ç–æ—Ç–∞: {self.current_notification_settings.get('frequency', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')}",
                reply_markup=self.keyboard_factory.get_notification_type_keyboard(notification_type)
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    async def toggle_notification(self, callback: CallbackQuery, state: FSMContext):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            state_data = await state.get_data()
            notification_type = state_data.get('notification_type')
            user_id = callback.from_user.id
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            current_status = self.current_notification_settings.get('status', 'disabled')
            new_status = 'disabled' if current_status == 'enabled' else 'enabled'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
            await self.db.update_notification_settings(
                user_id, 
                notification_type, 
                new_status == 'enabled'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.current_notification_settings['status'] = new_status
            
            await callback.message.edit_text(
                f"üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_type}\n\n"
                f"–°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω—ã' if new_status == 'enabled' else '–í—ã–∫–ª—é—á–µ–Ω—ã'}",
                reply_markup=self.keyboard_factory.get_notification_type_keyboard(notification_type)
            )
            await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if new_status == 'enabled' else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    async def set_notification_frequency(self, callback: CallbackQuery, state: FSMContext):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            _, _, notification_type, frequency = callback.data.split('_')
            user_id = callback.from_user.id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
            await self.db.update_notification_settings(
                user_id, 
                notification_type, 
                True,  # –≤–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                frequency
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.current_notification_settings = {
                'status': 'enabled',
                'frequency': frequency
            }
            
            await callback.message.edit_text(
                f"üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_type}\n\n"
                f"–°—Ç–∞—Ç—É—Å: –í–∫–ª—é—á–µ–Ω—ã\n"
                f"–ß–∞—Å—Ç–æ—Ç–∞: {frequency}",
                reply_markup=self.keyboard_factory.get_notification_type_keyboard(notification_type)
            )
            await callback.answer(f"–ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {frequency}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    async def show_report_period_menu(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞
            user_id = callback.from_user.id
            current_settings = await self.db.get_report_period(user_id)
            
            await callback.message.edit_text(
                "üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏\n\n"
                f"–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: {current_settings['period_type'].capitalize()}\n"
                f"–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞: {current_settings['start_day']} —á–∏—Å–ª–æ",
                reply_markup=self.keyboard_factory.get_report_period_keyboard()
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞")

    async def select_report_period_type(self, callback: CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"""
        try:
            period_type = callback.data.split('_')[-1]
            
            await state.update_data(report_period_type=period_type)
            
            await callback.message.edit_text(
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_type.capitalize()}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:",
                reply_markup=self.keyboard_factory.get_report_period_start_keyboard(period_type)
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥")

    async def save_report_period(self, callback: CallbackQuery, state: FSMContext):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"""
        try:
            state_data = await state.get_data()
            period_type = state_data.get('report_period_type')
            start_day = int(callback.data.split('_')[-1])
            user_id = callback.from_user.id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self.db.update_report_period(user_id, start_day, period_type)
            
            await callback.message.edit_text(
                "‚úÖ –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω\n\n"
                f"–¢–∏–ø: {period_type.capitalize()}\n"
                f"–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞: {start_day} —á–∏—Å–ª–æ",
                reply_markup=self.keyboard_factory.get_settings_keyboard()
            )
            await callback.answer("–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            await state.clear()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥")

    async def show_report_periods(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
        try:
            user_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            periods = await self.db.get_financial_report_periods(user_id)
            
            if not periods:
                await callback.message.edit_text(
                    "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞",
                    reply_markup=self.keyboard_factory.settings_menu()
                )
                return
            
            await callback.message.edit_text(
                "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
                reply_markup=self.keyboard_factory.get_report_periods_keyboard(periods)
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–µ—Ä–∏–æ–¥–æ–≤ –æ—Ç—á–µ—Ç–∞: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã –æ—Ç—á–µ—Ç–∞")

    async def generate_financial_report(self, callback: CallbackQuery):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ callback_data
            period_index = int(callback.data.split('_')[-1])
            user_id = callback.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            periods = await self.db.get_financial_report_periods(user_id)
            selected_period = periods[period_index]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = await self.db.generate_financial_report(
                user_id, 
                selected_period['start'].strftime('%Y-%m-%d'), 
                selected_period['end'].strftime('%Y-%m-%d')
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_text = self.format_financial_report(report)
            
            await callback.message.edit_text(
                report_text,
                reply_markup=self.keyboard_factory.get_report_actions_keyboard(period_index)
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")

    def format_financial_report(self, report):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        report_text = f"üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç\n"
        report_text += f"–ü–µ—Ä–∏–æ–¥: {report['period_start'].strftime('%d.%m.%Y')} - {report['period_end'].strftime('%d.%m.%Y')}\n"
        report_text += f"–í–∞–ª—é—Ç–∞: {report['currency']}\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report_text += "üí∞ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        report_text += f"–î–æ—Ö–æ–¥: {report['total_income']:.2f}\n"
        report_text += f"–†–∞—Å—Ö–æ–¥: {report['total_expense']:.2f}\n"
        report_text += f"–ë–∞–ª–∞–Ω—Å: {report['balance']:.2f}\n\n"
        
        # –õ–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤
        report_text += "üö® –õ–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤:\n"
        report_text += f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç: {report['expense_limit']:.2f}\n"
        status_map = {
            'exceeded': "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω",
            'warning': "‚ö†Ô∏è –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –ª–∏–º–∏—Ç—É",
            'normal': "‚úÖ –í –Ω–æ—Ä–º–µ"
        }
        report_text += f"–°—Ç–∞—Ç—É—Å: {status_map[report['expense_limit_status']]}\n\n"
        
        # –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        report_text += "üìà –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        for category in report['income_categories']:
            report_text += f"‚Ä¢ {category['name']}: {category['total_amount']:.2f} ({category['transaction_count']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)\n"
        
        # –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        report_text += "\nüìâ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        for category in report['expense_categories']:
            report_text += f"‚Ä¢ {category['name']}: {category['total_amount']:.2f} (—Å—Ä. {category['avg_amount']:.2f}, {category['transaction_count']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)\n"
        
        return report_text

def register_handlers(router: Router):
    handler = FinanceHandler()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    router.message.register(
        handler.start_transaction_income, 
        F.text == "üí∞ –î–æ—Ö–æ–¥—ã"
    )
    router.message.register(
        handler.start_transaction_expense, 
        F.text == "üí∏ –†–∞—Å—Ö–æ–¥—ã"
    )
    router.message.register(
        handler.start_transaction_income, 
        Command("add_income")
    )
    router.message.register(
        handler.start_transaction_expense, 
        Command("add_expense")
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    router.callback_query.register(
        handler.process_category_callback,
        F.data.startswith("category_")
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    router.callback_query.register(
        handler.cancel_transaction,
        F.data == "cancel"
    )
    router.callback_query.register(
        handler.main_menu,
        F.data == "main_menu"
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    router.message.register(
        handler.process_amount, 
        FinanceForm.waiting_for_amount
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    router.message.register(
        handler.show_statistics, 
        F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    router.message.register(
        handler.start_command, 
        Command("start")
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    router.callback_query.register(
        handler.process_show_chart,
        F.data == "show_chart"
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    router.message.register(
        handler.show_settings, 
        F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    )
    router.callback_query.register(
        handler.process_currency_settings, 
        F.data.startswith("currency_")
    )
    router.callback_query.register(
        handler.process_expense_limit, 
        F.data == "settings_expense_limit"
    )
    router.message.register(
        handler.save_expense_limit, 
        SettingsForm.set_expense_limit
    )
    router.callback_query.register(
        handler.show_notifications_menu, 
        F.data == "settings_notifications"
    )
    router.callback_query.register(
        handler.show_notification_type_settings, 
        F.data.startswith("notification_settings_")
    )
    router.callback_query.register(
        handler.toggle_notification, 
        F.data.startswith("notification_toggle_")
    )
    router.callback_query.register(
        handler.set_notification_frequency, 
        F.data.startswith("notification_frequency_")
    )
    router.callback_query.register(
        handler.show_report_period_menu, 
        F.data == "settings_report_period"
    )
    router.callback_query.register(
        handler.select_report_period_type, 
        F.data.startswith("report_period_")
    )
    router.callback_query.register(
        handler.save_report_period, 
        F.data.startswith("report_period_start_")
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    router.callback_query.register(
        handler.manage_categories, 
        F.data.startswith("settings_categories_")
    )
    router.callback_query.register(
        handler.start_add_category, 
        F.data.startswith("add_category_")
    )
    router.message.register(
        handler.save_new_category, 
        SettingsForm.add_category
    )
    router.callback_query.register(
        handler.remove_category, 
        F.data.startswith("remove_category_")
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
    router.callback_query.register(
        handler.show_report_periods, 
        F.data == "show_report_periods"
    )
    router.callback_query.register(
        handler.generate_financial_report, 
        F.data.startswith("generate_report_")
    )

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
finance_handler = FinanceHandler()
