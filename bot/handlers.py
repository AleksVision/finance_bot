from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from decimal import Decimal, InvalidOperation
from datetime import datetime, timedelta
import logging

from bot.database import FinanceDatabase, DatabaseError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

class TransactionType:
    INCOME = 'income'
    EXPENSE = 'expense'

class Categories:
    INCOME = {
        'salary': '–ó–∞—Ä–ø–ª–∞—Ç–∞',
        'freelance': '–§—Ä–∏–ª–∞–Ω—Å',
        'investments': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
        'gifts': '–ü–æ–¥–∞—Ä–∫–∏',
        'other_income': '–î—Ä—É–≥–æ–µ'
    }
    
    EXPENSE = {
        'food': '–ü—Ä–æ–¥—É–∫—Ç—ã',
        'transport': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
        'housing': '–ñ–∏–ª—å–µ',
        'entertainment': '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        'health': '–ó–¥–æ—Ä–æ–≤—å–µ',
        'clothes': '–û–¥–µ–∂–¥–∞',
        'electronics': '–¢–µ—Ö–Ω–∏–∫–∞',
        'other_expense': '–î—Ä—É–≥–æ–µ'
    }

class FinanceForm(StatesGroup):
    waiting_for_transaction_type = State()
    waiting_for_category = State()
    waiting_for_amount = State()

class KeyboardFactory:
    @staticmethod
    def get_main_keyboard():
        builder = ReplyKeyboardBuilder()
        builder.button(text="üí∞ –î–æ—Ö–æ–¥—ã")
        builder.button(text="üí∏ –†–∞—Å—Ö–æ–¥—ã")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        builder.adjust(2, 2)
        return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

    @staticmethod
    def get_transaction_type_keyboard():
        builder = InlineKeyboardBuilder()
        builder.button(text="üí∞ –î–æ—Ö–æ–¥", callback_data="transaction_income")
        builder.button(text="üí∏ –†–∞—Å—Ö–æ–¥", callback_data="transaction_expense")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2, 1)
        return builder.as_markup()

    @staticmethod
    def get_category_inline_keyboard(transaction_type: str):
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_type}")
        
        builder = InlineKeyboardBuilder()
        
        categories = (
            Categories.INCOME 
            if transaction_type == TransactionType.INCOME 
            else Categories.EXPENSE
        )
        logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}")
        
        emoji_map = {
            'salary': 'üíº', 'freelance': 'üíª', 'investments': 'üìà', 'gifts': 'üéÅ', 'other_income': '‚ùì',
            'food': 'üçΩÔ∏è', 'transport': 'üöá', 'housing': 'üè†', 'entertainment': 'üéâ', 
            'health': 'üíä', 'clothes': 'üëö', 'electronics': 'üíª', 'other_expense': '‚ùì'
        }
        
        for key, value in categories.items():
            emoji = emoji_map.get(key, 'üí∞')
            button_text = f"{emoji} {value}"
            callback_data = f"category_{key}"
            
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: {button_text}, callback_data: {callback_data}")
            builder.button(
                text=button_text, 
                callback_data=callback_data
            )
        
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2, 1)
        
        keyboard = builder.as_markup()
        logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {keyboard}")
        return keyboard

    @staticmethod
    def get_confirmation_keyboard():
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        builder.adjust(2)
        return builder.as_markup()

class FinanceHandler:
    def __init__(self):
        self.db = FinanceDatabase()
        self.keyboard_factory = KeyboardFactory()

    async def start_transaction_income(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: —Ç–∏–ø = {TransactionType.INCOME}")
            logger.info(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message)}")
            logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await self.db.create_user_if_not_exists(message.from_user.id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(transaction_type=TransactionType.INCOME)
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await state.set_state(FinanceForm.waiting_for_category)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            keyboard = self.keyboard_factory.get_category_inline_keyboard(TransactionType.INCOME)
            logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            text = "üì• –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é –¥–æ—Ö–æ–¥–∞"
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {text}")
            logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ message –æ–±—ä–µ–∫—Ç–æ–º Message
            if hasattr(message, 'answer'):
                await message.answer(text, reply_markup=keyboard)
            elif hasattr(message, 'message') and hasattr(message.message, 'answer'):
                await message.message.answer(text, reply_markup=keyboard)
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø: {type(message)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}", exc_info=True)
            if hasattr(message, 'answer'):
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()

    async def start_transaction_expense(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: —Ç–∏–ø = {TransactionType.EXPENSE}")
            logger.info(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message)}")
            logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await self.db.create_user_if_not_exists(message.from_user.id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(transaction_type=TransactionType.EXPENSE)
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await state.set_state(FinanceForm.waiting_for_category)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            keyboard = self.keyboard_factory.get_category_inline_keyboard(TransactionType.EXPENSE)
            logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            text = "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–∞"
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {text}")
            logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ message –æ–±—ä–µ–∫—Ç–æ–º Message
            if hasattr(message, 'answer'):
                await message.answer(text, reply_markup=keyboard)
            elif hasattr(message, 'message') and hasattr(message.message, 'answer'):
                await message.message.answer(text, reply_markup=keyboard)
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø: {type(message)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}", exc_info=True)
            if hasattr(message, 'answer'):
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()

    async def process_category_callback(self, callback: CallbackQuery, state: FSMContext):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if not callback.data.startswith('category_'):
                return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = callback.data.split('_')[1]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            transaction_type = data.get('transaction_type')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = (
                Categories.INCOME 
                if transaction_type == TransactionType.INCOME 
                else Categories.EXPENSE
            )
            
            if category not in categories:
                await callback.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
            await state.update_data(category=category)
            await state.set_state(FinanceForm.waiting_for_amount)

            # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É
            text = (
                f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ ({categories[category]})" 
                if transaction_type == TransactionType.INCOME 
                else f"üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ ({categories[category]})"
            )
            await callback.message.answer(
                text, 
                reply_markup=self.keyboard_factory.get_confirmation_keyboard()
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()

    async def cancel_transaction(self, callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            await callback.message.answer(
                "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
                reply_markup=self.keyboard_factory.get_main_keyboard()
            )
            await state.clear()
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")

    async def main_menu(self, callback: CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            await callback.message.answer(
                "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                reply_markup=self.keyboard_factory.get_main_keyboard()
            )
            await state.clear()
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")

    async def process_amount(self, message: types.Message, state: FSMContext):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—É–º–º—ã
            try:
                amount = Decimal(message.text.replace(',', '.'))
                if amount <= 0:
                    raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            except (ValueError, InvalidOperation):
                await message.answer(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.",
                    reply_markup=self.keyboard_factory.get_confirmation_keyboard()
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            data = await state.get_data()
            transaction_type = data.get('transaction_type')
            category = data.get('category')

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            transaction = await self.db.add_transaction(
                user_id=message.from_user.id,
                amount=amount,
                type_=transaction_type,
                category=category
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            category_name = (
                Categories.INCOME.get(category, category) 
                if transaction_type == TransactionType.INCOME 
                else Categories.EXPENSE.get(category, category)
            )
            
            result_message = (
                f"‚úÖ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
                f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}"
            ) if transaction_type == TransactionType.INCOME else (
                f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
                f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.answer(
                result_message, 
                reply_markup=self.keyboard_factory.get_main_keyboard()
            )

            # –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            logger.info(
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: "
                f"user_id={message.from_user.id}, "
                f"amount={amount}, "
                f"type={transaction_type}, "
                f"category={category}"
            )

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                reply_markup=self.keyboard_factory.get_main_keyboard()
            )
            await state.clear()

    async def show_statistics(self, message: types.Message):
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await self.db.create_user_if_not_exists(message.from_user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.db.get_statistics(
                user_id=message.from_user.id,
                start_date=datetime.now() - timedelta(days=30)
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            income_categories = {}
            expense_categories = {}
            
            for transaction in stats.transactions:
                if transaction.type == TransactionType.INCOME:
                    income_categories[transaction.category] = income_categories.get(transaction.category, 0) + transaction.amount
                else:
                    expense_categories[transaction.category] = expense_categories.get(transaction.category, 0) + transaction.amount
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å—É–º–º–µ
            sorted_income_categories = sorted(income_categories.items(), key=lambda x: x[1], reverse=True)
            sorted_expense_categories = sorted(expense_categories.items(), key=lambda x: x[1], reverse=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n"
            message_text += f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {stats.total_income} —Ä—É–±.\n"
            message_text += f"üí∏ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {stats.total_expense} —Ä—É–±.\n"
            message_text += f"üíµ –ë–∞–ª–∞–Ω—Å: {stats.total_income - stats.total_expense} —Ä—É–±.\n\n"
            
            # –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            message_text += "üìà –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            for category, amount in sorted_income_categories:
                category_name = Categories.INCOME.get(category, category)
                message_text += f"- {category_name}: {amount} —Ä—É–±. ({amount/stats.total_income*100:.1f}%)\n"
            
            # –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            message_text += "\nüìâ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            for category, amount in sorted_expense_categories:
                category_name = Categories.EXPENSE.get(category, category)
                message_text += f"- {category_name}: {amount} —Ä—É–±. ({amount/stats.total_expense*100:.1f}%)\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await message.answer(
                message_text, 
                reply_markup=self.keyboard_factory.get_main_keyboard()
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            logger.info(
                f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞: "
                f"user_id={message.from_user.id}, "
                f"total_income={stats.total_income}, "
                f"total_expense={stats.total_expense}"
            )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                reply_markup=self.keyboard_factory.get_main_keyboard()
            )

    async def start_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await self.db.create_user_if_not_exists(message.from_user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! \n\n"
                "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üí∞\n\n"
                "–ß—Ç–æ —É–º–µ—é:\n"
                "‚Ä¢ üí∞ –î–æ–±–∞–≤–ª—è—Ç—å –¥–æ—Ö–æ–¥—ã\n"
                "‚Ä¢ üí∏ –£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã\n"
                "‚Ä¢ üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:",
                reply_markup=self.keyboard_factory.get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def register_handlers(router: Router):
    handler = FinanceHandler()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    router.message.register(
        handler.start_transaction_income, 
        F.text == "üí∞ –î–æ—Ö–æ–¥—ã"
    )
    router.message.register(
        handler.start_transaction_expense, 
        F.text == "üí∏ –†–∞—Å—Ö–æ–¥—ã"
    )
    router.message.register(
        handler.start_transaction_income, 
        Command("add_income")
    )
    router.message.register(
        handler.start_transaction_expense, 
        Command("add_expense")
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    router.callback_query.register(
        handler.process_category_callback,
        F.data.startswith("category_")
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    router.callback_query.register(
        handler.cancel_transaction,
        F.data == "cancel"
    )
    router.callback_query.register(
        handler.main_menu,
        F.data == "main_menu"
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    router.message.register(
        handler.process_amount, 
        FinanceForm.waiting_for_amount
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    router.message.register(
        handler.show_statistics, 
        F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    router.message.register(
        handler.start_command, 
        Command("start")
    )

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
finance_handler = FinanceHandler()
