import pytest
import asyncio
from decimal import Decimal
from aiogram import Dispatcher
from aiogram.fsm.storage.base import BaseStorage, StorageKey
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, User
from unittest.mock import AsyncMock, MagicMock
from typing import Dict, Any

from bot.handlers import FinanceHandler, TransactionType, Categories, FinanceForm
from bot.database import FinanceDatabase

class MockStorage(BaseStorage):
    """–ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è MockStorage –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def __init__(self):
        self.storage = {}

    async def set_state(self, key: StorageKey, state=None):
        self.storage.setdefault(key, {})['state'] = state

    async def get_state(self, key: StorageKey):
        return self.storage.get(key, {}).get('state')

    async def set_data(self, key: StorageKey, data: Dict[str, Any]):
        self.storage.setdefault(key, {})['data'] = data

    async def get_data(self, key: StorageKey):
        return self.storage.get(key, {}).get('data', {})

    async def update_data(self, key: StorageKey, data: Dict[str, Any]):
        current_data = await self.get_data(key)
        current_data.update(data)
        await self.set_data(key, current_data)
        return current_data

    async def close(self):
        self.storage.clear()

@pytest.fixture
async def finance_handler():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
    handler = FinanceHandler()
    handler.db = AsyncMock(spec=FinanceDatabase)
    handler.keyboard_factory = MagicMock()  # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫ –¥–ª—è keyboard_factory
    return handler

@pytest.fixture
async def message_mock():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message_mock = AsyncMock()
    message_mock.from_user = MagicMock()
    message_mock.from_user.id = 123456
    message_mock.answer = AsyncMock()
    return message_mock

@pytest.fixture
async def state_mock():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-–æ–±—ä–µ–∫—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    state_mock = AsyncMock()
    state_mock.update_data = AsyncMock()
    state_mock.set_state = AsyncMock()
    state_mock.get_data = AsyncMock(return_value={})
    return state_mock

@pytest.mark.asyncio
async def test_start_transaction_income(finance_handler, message_mock, state_mock, mocker):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ—Ö–æ–¥–∞"""
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    transaction_type = TransactionType.INCOME
    
    # –ú–æ–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    mocker.patch.object(finance_handler.db, 'create_user_if_not_exists', return_value=None)
    
    # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
    await finance_handler.start_transaction(message_mock, state_mock, transaction_type)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    state_mock.update_data.assert_called_once_with(transaction_type=transaction_type)
    state_mock.set_state.assert_called_once_with(FinanceForm.waiting_for_category)
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    message_mock.answer.assert_called_once()
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    call_args = message_mock.answer.call_args
    assert "üì• –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é –¥–æ—Ö–æ–¥–∞" in call_args[0][0]
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = call_args[1]['reply_markup']
    assert keyboard is not None, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π"

@pytest.mark.asyncio
async def test_start_transaction_expense(finance_handler, message_mock, state_mock, mocker):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞"""
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    transaction_type = TransactionType.EXPENSE
    
    # –ú–æ–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    mocker.patch.object(finance_handler.db, 'create_user_if_not_exists', return_value=None)
    
    # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
    await finance_handler.start_transaction(message_mock, state_mock, transaction_type)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    state_mock.update_data.assert_called_once_with(transaction_type=transaction_type)
    state_mock.set_state.assert_called_once_with(FinanceForm.waiting_for_category)
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    message_mock.answer.assert_called_once()
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    call_args = message_mock.answer.call_args
    assert "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–∞" in call_args[0][0]
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = call_args[1]['reply_markup']
    assert keyboard is not None, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π"

@pytest.mark.asyncio
async def test_process_category_callback_income(finance_handler, state_mock):
    """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state_mock.update_data(transaction_type=TransactionType.INCOME)

    callback_mock = AsyncMock(spec=CallbackQuery)
    callback_mock.data = "category_salary"
    callback_mock.message = AsyncMock(spec=Message)
    callback_mock.message.answer = AsyncMock()
    callback_mock.from_user = User(id=456, first_name="Test", is_bot=False)
    callback_mock.answer = AsyncMock()

    # –ú–æ–∫–∞–µ–º get_data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    state_mock.get_data.return_value = {'transaction_type': TransactionType.INCOME}

    await finance_handler.process_category_callback(callback_mock, state_mock)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
    state_mock.update_data.assert_called_with(category="salary")
    callback_mock.message.answer.assert_called_once_with("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
    callback_mock.answer.assert_called_once()

@pytest.mark.asyncio
async def test_process_amount_income(finance_handler, state_mock):
    """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state_mock.update_data({
        'transaction_type': TransactionType.INCOME,
        'category': 'salary'
    })

    message_mock = AsyncMock(spec=Message)
    message_mock.text = "1000.50"
    message_mock.from_user = User(id=456, first_name="Test", is_bot=False)
    message_mock.answer = AsyncMock()

    # –ú–æ–∫–∞–µ–º get_data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    state_mock.get_data.return_value = {
        'transaction_type': TransactionType.INCOME,
        'category': 'salary'
    }

    # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    finance_handler.db.add_transaction = AsyncMock()

    await finance_handler.process_amount(message_mock, state_mock)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞
    finance_handler.db.add_transaction.assert_called_once_with(
        user_id=456,
        amount=Decimal('1000.50'),
        type_='income',
        category='salary'
    )

@pytest.mark.asyncio
async def test_invalid_amount_input(finance_handler, state_mock):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state_mock.update_data({
        'transaction_type': TransactionType.INCOME,
        'category': 'salary'
    })

    message_mock = AsyncMock(spec=Message)
    message_mock.text = "invalid_amount"
    message_mock.from_user = User(id=456, first_name="Test", is_bot=False)
    message_mock.answer = AsyncMock()

    await finance_handler.process_amount(message_mock, state_mock)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    message_mock.answer.assert_called_once()
    assert "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞" in message_mock.answer.call_args[0][0]

@pytest.mark.asyncio
async def test_show_statistics(finance_handler):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_mock = AsyncMock(spec=Message)
    message_mock.from_user = User(id=456, first_name="Test", is_bot=False)
    message_mock.answer = AsyncMock()

    # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    finance_handler.db.create_user_if_not_exists = AsyncMock()

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    class MockStats:
        total_income = 100000
        total_expense = 50000
        balance = 50000

    finance_handler.db.get_statistics = AsyncMock(return_value=MockStats())

    # –ú–æ–∫–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    finance_handler.keyboard_factory.get_main_keyboard = MagicMock(return_value=None)

    await finance_handler.show_statistics(message_mock)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤
    finance_handler.db.create_user_if_not_exists.assert_called_once_with(456)
    finance_handler.db.get_statistics.assert_called_once()
    message_mock.answer.assert_called_once()
    assert "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π" in message_mock.answer.call_args[0][0]
